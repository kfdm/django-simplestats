# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-01-08 08:31
from __future__ import unicode_literals

from django.db import migrations
from django.db import transaction
from urllib.parse import parse_qs, urlparse


def migrate_objects(apps, schema_editor):
    Widget = apps.get_model("simplestats", "Widget")

    # Countdowns need to migrate the extra values to a simple meta object
    Countdown = apps.get_model("simplestats", "Countdown")
    for c in Countdown.objects.all():
        w = Widget.objects.create(
            slug=c.id,
            title=c.label,
            description=c.description,
            owner_id=c.owner_id,
            icon=c.icon,
            more=c.more,
            public=c.public,
            type='countdown',
        )
        if c.allday:
            w.meta_set.create(key='calendar.allday', value='True')
        if c.repeating:
            w.meta_set.create(key='calendar.repeating', value='True')
        if c.calendar:
            w.meta_set.create(key='calendar.subscription', value=c.calendar)

    # Charts need to migrate to samples and labels
    Chart = apps.get_model("simplestats", "Chart")
    for c in Chart.objects.all():
        w = Widget.objects.create(
            slug=c.id,
            timestamp=c.created,
            owner_id=c.owner_id,
            public=c.public,
            icon=c.icon,
            value=c.value,
            more=c.more,
            title=c.label,
            description=c.keys,
            type='chart',
        )
        for k, v in c.labels.items():
            if k == '__name__' and 'metric' not in c.labels:
                k = 'metric'
            w.label_set.create(name=k, value=v)

        print('Migrating', w.title)
        with transaction.atomic():
            for d in c.data_set.all():
                w.sample_set.create(
                    timestamp=d.timestamp,
                    value=d.value,
            )

    Location = apps.get_model("simplestats", "Location")
    for l in Location.objects.all():
        w = Widget.objects.create(
            slug=l.id,
            owner_id=l.owner_id,
            title=l.name,
            type='location',
        )
        for m in l.movement_set.all():
            # Parse out google maps URL and store as lat/lon
            url = urlparse(m.map)
            qs = parse_qs(url.query)
            lat, lon = qs['q'][0].split(',')
            w.waypoint_set.create(
                description=m.note,
                timestamp=m.created,
                lat=lat,
                lon=lon,
                state=m.state,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('simplestats', '0042_new_widget'),
    ]

    operations = [
        migrations.RunPython(migrate_objects, migrations.RunPython.noop),
    ]
